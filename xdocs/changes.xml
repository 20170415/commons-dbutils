<?xml version="1.0"?>
<!--
   Copyright 2004 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!--
This file is used by the maven-changes-plugin to generate the release notes.
Useful ways of finding items to add to this file are:

1.  Add items when you fix a bug or add a feature (this makes the 
release process easy :-).

2.  Do a bugzilla search for tickets closed since the previous release.

3.  Use the report generated by the maven-changelog-plugin to see all
CVS commits.  Set the project.properties' maven.changelog.range 
property to the number of days since the last release.


The <action> type attribute can be add,update,fix,remove.
-->

<document>
  <properties>
    <title>Release Notes</title>
  </properties>
  <body>

    <release version="1.1-dev" date="in CVS">
      <action dev="dgraham" type="update">
        Made QueryLoader.loadQueries() protected so subclasses can use query
        repositories other than properties files.  PR: 31460        
      </action>
      <action dev="dgraham" type="update">
        QueryRunner now calls getDataSource() internally any time it needs access
        to its DataSource object to allow subclasses to provide different behavior.
      </action>
      <action dev="dgraham" type="add">
        Added DbUtils.rollbackAndClose() and DbUtils.rollbackAndCloseQuietly().
      </action>
      <action dev="dgraham" type="update">
        Call ResultSet.getTimestamp() in BeanProcessor.processColumn() if 
        the bean property is a java.sql.Timestamp.  Oracle's getObject() 
        implementation returns its own incompatible Timestamp class.
        PR: 30749
      </action>
      <action dev="dgraham" type="update">
        Changed QueryRunner.fillStatement() null handling 
        to use Types.VARCHAR instead of Types.OTHER.  This works for the 
        following tested drivers: Firebird 1.5/firebirdsql 1.5RC3,
        Oracle 9/ Thin driver, MySQL 4.0/Msql Connecttor 3.0 and mm.mysql 
        2.0.4 MaxDB 7.5, HSQLDB 1.7.1, and MS Access/ODBC Bridge.
        PR# 29212
      </action>
      <action dev="dgraham" type="add">
        Added a protected QueryRunner.prepareConnection() method to
        allow subclasses to customize the Connections retrieved from
        the DataSource before they're used.
        PR# 30032
      </action>
      <action dev="dgraham" type="add">
        Refactored bean handling from BasicRowProcessor into new 
        BeanProcessor class.  This also fixes the common problem with
        Oracle NUMERIC fields not being set into bean properties.
      </action>
      <action dev="dgraham" type="add">
        Added QueryRunner.batch() methods for batch updates.
        PR# 27530
      </action>
      <action dev="dgraham" type="add">
        Added new ResultSetHandler implementation, ColumnListHandler, that 
        converts one ResultSet column into a List of Objects. 
        PR# 27377
      </action>
    </release>
    
    <release version="1.0" date="2003-11-10">
      <action type="add">
        This is the first release of the Commons DbUtils package.  DbUtils
        is a small set of classes designed to make working with JDBC easier.
      </action>    
      <action type="add">
        QueryRunner class with ResultSetHandler interface allow you to easily query or
        update a database and handle the ResultSet.  Several useful implementations
        of the ResultSetHandler interface are located in the 
        org.apache.commons.dbutils.handlers.* package.
      </action>    
      <action type="add">
        ResultSet wrappers that decorate ResultSets with specialized 
        behavior.  See the classes in the org.apache.commons.dbutils.wrappers.* 
        package for details.
      </action>
      <action type="add">
        Dynamic JDBC API interface implementations via the standard 
        java.lang.reflect.Proxy class.  This allows you to implement JDBC 
        interfaces such as ResultSet at runtime to avoid API version 
        incompatibilities.  See org.apache.commons.dbutils.ProxyFactory 
        for details.
      </action>
    </release>
    
  </body>
</document>