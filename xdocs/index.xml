<?xml version="1.0"?>

<document>

 <properties>
  <title>JDBC Utility Component</title>
  <author email="dgraham@apache.org">David Graham</author>
 </properties>

<body>

<section name="DbUtils: JDBC Utility Component">

<section name="Purpose">
<p>
DbUtils is a small set of classes designed to make working with 
<a href="http://java.sun.com/products/jdbc/">JDBC</a> easier.  JDBC 
resource cleanup code is mundane, error prone work so these classes 
abstract out all of the cleanup tasks from your code leaving you with
what you really wanted to do with JDBC in the first place: query and 
update data.
</p>

<p>Some of the advantages of using DbUtils are:</p>
<ul>
	<li>
	    No possibility for resource leaks.  Correct JDBC coding isn't 
	    difficult but it is time-consuming and tedious.  This often 
	    leads to connection leaks that may be difficult to track down.
	</li>
	<li>
    	Cleaner, clearer persistence code.  The amount of code needed 
    	to persist data in a database is drastically reduced. The remaining 
    	code clearly expresses your intention without being cluttered 
    	with resource cleanup.
	</li>
</ul>

</section>


<section name="Scope of the Package">
<p>
DbUtils is designed to be:
</p>
<ul>
    <li>
        <strong>Small</strong> - you should be able to understand the 
        whole package in a short amount of time.
    </li>
    <li>
        <strong>Transparent</strong> - DbUtils doesn't do any magic 
        behind the scenes.  You give it a query, it executes it and 
        cleans up for you.
    </li>
    <li>
        <strong>Fast</strong> - You don't need to create a million 
        temporary objects to work with DbUtils.
    </li>
</ul>

<p>
DbUtils is <strong>not</strong>:
</p>
<ul>
    <li>
        An Object/Relational bridge - there are plenty of good O/R tools
        already.  DbUtils is for developers looking to use JDBC without all
        the mundane pieces.  
    </li>
    <li>
        A Data Access Object (DAO) framework - DbUtils can be used to build
        a DAO framework though.
    </li>
    <li>
        An object oriented abstraction of general database
        objects like a Table, Column, or PrimaryKey.
    </li>
    <li>
        A heavyweight framework of any kind - the goal here is to be a 
        straightforward and easy to use JDBC helper library.
    </li>
</ul>

</section>

<section name="Example Usage">
<p>
The core classes/interfaces in DbUtils are 
<code><a href="apidocs/org/apache/commons/dbutils/QueryRunner.html">QueryRunner</a></code>
and
<code><a href="apidocs/org/apache/commons/dbutils/ResultSetHandler.html">ResultSetHandler</a></code>.
The following example demonstrates how these classes are used together.
</p>

<pre>
DataSource ds = // somehow get DataSource;

// Step 1.
QueryRunner run = new QueryRunner(ds);

// Step 2.
ResultSetHandler h = new BeanHandler(Person.class);

// Step 3.
Person p = (Person) run.query("SELECT * FROM Person WHERE name=?", "John Doe", h); 

</pre>

<p>Explanation</p>
<ol>
    <li>
        Configure QueryRunner with the DataSource.
        Note that QueryRunner has methods that take a 
        java.sql.Connection so you are not required to
        use DataSources.
    </li>
    <li>
        Implement the ResultSetHandler interface or use
        one of the provided implementations.  This one converts a 
        ResultSet row into a bean.
    </li>
    <li>
        Execute the SQL statement with one replacement parameter and
        return the results in a new Person object (generated by the handler
        in step 2).
    </li>
</ol>

</section>

<section name="Interaction With Other Packages">
    <p>DbUtils relies on these packages:</p> 
    <ul>
        <li>Java 1.2 (or later)</li>
        <li>JDBC 2.0 (or later)</li>
    </ul>
</section>

</section>

</body>
</document>

